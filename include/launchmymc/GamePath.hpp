#pragma once

#include <filesystem>

namespace lmm {

/**
 * A class holding the root game/assets/libraries/natives directories as well as
 * the game's jar file.
 *
 * The constructors will make the provided paths absolute, make sure they exist,
 * that directories are directories, and that files are files.
 */
class GamePath {
public:
  /**
   * Create a GamePath with the default names generated by FlowUpdater.
   *
   * @param gameDir Root game directory.
   */
  explicit GamePath(const std::filesystem::path &gameDir);

  /**
   * Create a GamePath with custom paths.
   */
  GamePath(
      const std::filesystem::path &gameDir,
      const std::filesystem::path &assetsDir,
      const std::filesystem::path &libsDir,
      const std::filesystem::path &nativesDir,
      const std::filesystem::path &jarFile);

  /**
   * The working directory used when launching.
   */
  [[nodiscard]] const std::filesystem::path &getGameDir() const;

  /**
   * The directory containing minecraft's assets.
   */
  [[nodiscard]] const std::filesystem::path &getAssetsDir() const;

  /**
   * The directory containing the libraries used by minecraft.
   */
  [[nodiscard]] const std::filesystem::path &getLibsDir() const;

  /**
   * The directory containing native files.
   */
  [[nodiscard]] const std::filesystem::path &getNativesDir() const;

  /**
   * The game's jar file.
   */
  [[nodiscard]] const std::filesystem::path &getJarFile() const;

private:
  std::filesystem::path gameDir, assetsDir, libsDir, nativesDir, jarFile;
};

} // namespace lmm
